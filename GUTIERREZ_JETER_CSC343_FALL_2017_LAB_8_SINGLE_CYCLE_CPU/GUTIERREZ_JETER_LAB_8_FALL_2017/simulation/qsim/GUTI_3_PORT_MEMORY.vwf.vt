// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2017 14:20:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GUTI_3_PORT_MEMORY
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GUTI_3_PORT_MEMORY_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [31:0] DATA;
reg [4:0] RDADDRESS_A;
reg [4:0] RDADDRESS_B;
reg [4:0] WRADDRESS;
reg WREN;
// wires                                               
wire [31:0] QA;
wire [31:0] QB;

// assign statements (if any)                          
GUTI_3_PORT_MEMORY i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DATA(DATA),
	.QA(QA),
	.QB(QB),
	.RDADDRESS_A(RDADDRESS_A),
	.RDADDRESS_B(RDADDRESS_B),
	.WRADDRESS(WRADDRESS),
	.WREN(WREN)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
initial
begin
	repeat(12)
	begin
		CLOCK = 1'b0;
		CLOCK = #40000 1'b1;
		# 40000;
	end
	CLOCK = 1'b0;
end 
// DATA[ 31 ]
initial
begin
	DATA[31] = 1'b1;
end 
// DATA[ 30 ]
initial
begin
	DATA[30] = 1'b1;
end 
// DATA[ 29 ]
initial
begin
	DATA[29] = 1'b1;
end 
// DATA[ 28 ]
initial
begin
	DATA[28] = 1'b1;
end 
// DATA[ 27 ]
initial
begin
	DATA[27] = 1'b1;
end 
// DATA[ 26 ]
initial
begin
	DATA[26] = 1'b1;
end 
// DATA[ 25 ]
initial
begin
	DATA[25] = 1'b1;
end 
// DATA[ 24 ]
initial
begin
	DATA[24] = 1'b1;
end 
// DATA[ 23 ]
initial
begin
	DATA[23] = 1'b1;
end 
// DATA[ 22 ]
initial
begin
	DATA[22] = 1'b1;
end 
// DATA[ 21 ]
initial
begin
	DATA[21] = 1'b1;
end 
// DATA[ 20 ]
initial
begin
	DATA[20] = 1'b1;
end 
// DATA[ 19 ]
initial
begin
	DATA[19] = 1'b1;
end 
// DATA[ 18 ]
initial
begin
	DATA[18] = 1'b1;
end 
// DATA[ 17 ]
initial
begin
	DATA[17] = 1'b1;
end 
// DATA[ 16 ]
initial
begin
	DATA[16] = 1'b1;
end 
// DATA[ 15 ]
initial
begin
	DATA[15] = 1'b1;
end 
// DATA[ 14 ]
initial
begin
	DATA[14] = 1'b1;
end 
// DATA[ 13 ]
initial
begin
	DATA[13] = 1'b1;
end 
// DATA[ 12 ]
initial
begin
	DATA[12] = 1'b1;
end 
// DATA[ 11 ]
initial
begin
	DATA[11] = 1'b1;
end 
// DATA[ 10 ]
initial
begin
	DATA[10] = 1'b1;
end 
// DATA[ 9 ]
initial
begin
	DATA[9] = 1'b1;
end 
// DATA[ 8 ]
initial
begin
	DATA[8] = 1'b1;
end 
// DATA[ 7 ]
initial
begin
	DATA[7] = 1'b1;
end 
// DATA[ 6 ]
initial
begin
	DATA[6] = 1'b1;
end 
// DATA[ 5 ]
initial
begin
	DATA[5] = 1'b1;
end 
// DATA[ 4 ]
initial
begin
	DATA[4] = 1'b1;
end 
// DATA[ 3 ]
initial
begin
	DATA[3] = 1'b1;
end 
// DATA[ 2 ]
initial
begin
	DATA[2] = 1'b1;
end 
// DATA[ 1 ]
initial
begin
	DATA[1] = 1'b1;
end 
// DATA[ 0 ]
initial
begin
	DATA[0] = 1'b1;
end 
// RDADDRESS_A[ 4 ]
initial
begin
	RDADDRESS_A[4] = 1'b0;
end 
// RDADDRESS_A[ 3 ]
initial
begin
	RDADDRESS_A[3] = 1'b0;
end 
// RDADDRESS_A[ 2 ]
initial
begin
	RDADDRESS_A[2] = 1'b0;
end 
// RDADDRESS_A[ 1 ]
initial
begin
	RDADDRESS_A[1] = 1'b1;
end 
// RDADDRESS_A[ 0 ]
initial
begin
	RDADDRESS_A[0] = 1'b1;
end 
// RDADDRESS_B[ 4 ]
initial
begin
	RDADDRESS_B[4] = 1'b0;
end 
// RDADDRESS_B[ 3 ]
initial
begin
	RDADDRESS_B[3] = 1'b0;
end 
// RDADDRESS_B[ 2 ]
initial
begin
	RDADDRESS_B[2] = 1'b0;
end 
// RDADDRESS_B[ 1 ]
initial
begin
	RDADDRESS_B[1] = 1'b0;
end 
// RDADDRESS_B[ 0 ]
initial
begin
	RDADDRESS_B[0] = 1'b1;
end 
// WRADDRESS[ 4 ]
initial
begin
	WRADDRESS[4] = 1'b0;
end 
// WRADDRESS[ 3 ]
initial
begin
	WRADDRESS[3] = 1'b0;
end 
// WRADDRESS[ 2 ]
initial
begin
	WRADDRESS[2] = 1'b0;
end 
// WRADDRESS[ 1 ]
initial
begin
	WRADDRESS[1] = 1'b1;
end 
// WRADDRESS[ 0 ]
initial
begin
	WRADDRESS[0] = 1'b1;
end 

// WREN
initial
begin
	WREN = 1'b1;
end 
endmodule

