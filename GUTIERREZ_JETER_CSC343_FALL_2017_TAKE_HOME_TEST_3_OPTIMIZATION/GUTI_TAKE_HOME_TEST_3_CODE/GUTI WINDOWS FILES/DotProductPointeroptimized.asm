; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	C:\Users\Jeter\Desktop\Code\Code\Visual Studio\DotProductPointer\DotProductPointer\DotProductPointer\DotProductPointer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?DotProductPointer@@YAXPAH0H@Z			; DotProductPointer
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
; rtc$TMZ	SEGMENT                                   ; Remove
; __RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown       ; Remove
; rtc$TMZ	ENDS                                      ; Remove
;	COMDAT rtc$IMZ
; rtc$IMZ	SEGMENT                                   ; Remove
; __RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase       ; Remove
; rtc$IMZ	ENDS                                      ; Remove
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DotProductPointer@@YAXPAH0H@Z
_TEXT	SEGMENT
_sum$ = -20						; size = 4
_i$ = -8						; size = 4
_ArrayA$ = 8						; size = 4
_ArrayB$ = 12						; size = 4
_n$ = 16						; size = 4
?DotProductPointer@@YAXPAH0H@Z PROC			; DotProductPointer, COMDAT
; File c:\users\Jeter\desktop\code\code\visual studio\dotproductpointer\dotproductpointer\dotproductpointer\dotproductpointer.cpp
; Line 5
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 7
	mov	DWORD PTR _sum$[ebp], 0
; Line 8
;	mov	DWORD PTR _i$[ebp], 0              ; Remove
    mov eax, 0                             ; initialize i to eax
	mov edx, DWORD PTR _n$[ebp]            ; move n into edx
	jmp	SHORT $LN4@DotProduct
$LN2@DotProduct:
;	mov	eax, DWORD PTR _i$[ebp]            ; Remove
	add	eax, 1
;	mov	DWORD PTR _i$[ebp], eax            ; Remove
$LN4@DotProduct:
;	mov	eax, DWORD PTR _i$[ebp]            ; Remove
;	cmp	eax, DWORD PTR _n$[ebp]            ; Remove and replace:
    cmp eax, edx
	jge	SHORT $LN1@DotProduct
; Line 10
;	mov	eax, DWORD PTR _i$[ebp]            ; Remove
;	mov	ecx, DWORD PTR _ArrayA$[ebp]       ; Remove, start with arrayB:
	mov	ecx, DWORD PTR _ArrayB$[ebp]
;	mov	edx, DWORD PTR _i$[ebp]            ; Remove
;	mov	esi, DWORD PTR _ArrayB$[ebp]       ; Remove
;	mov	eax, DWORD PTR [ecx+eax*4]         ; Remove
    mov esi, DWORD PTR [ecx+eax*4]         ; ArrayB[i]
	mov ecx, DWORD PTR _ArrayA$[ebp]       ; use ecx instead of esi
;	imul	eax, DWORD PTR [esi+edx*4]     ; Remove
	imul esi, DWORD PTR [ecx+eax*4]        ; accumulate into esi
	mov	ecx, DWORD PTR _sum$[ebp]         
;	lea	edx, DWORD PTR [ecx+eax*4]         ; Remove and replace
    lea edi, DWORD PTR [ecx+esi*4]
;	mov	DWORD PTR _sum$[ebp], edx          ; Remove and replace
    mov	DWORD PTR _sum$[ebp], edi          
; Line 11
	jmp	SHORT $LN2@DotProduct
$LN1@DotProduct:
; Line 13
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DotProductPointer@@YAXPAH0H@Z ENDP			; DotProductPointer
_TEXT	ENDS
END
