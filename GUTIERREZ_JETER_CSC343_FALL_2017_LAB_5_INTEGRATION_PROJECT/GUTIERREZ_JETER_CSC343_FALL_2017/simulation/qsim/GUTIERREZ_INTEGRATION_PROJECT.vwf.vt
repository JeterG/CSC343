// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2017 21:26:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GUTIERREZ_INTEGRATION_PROJECT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GUTIERREZ_INTEGRATION_PROJECT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [3:0] OPCODE;
reg [5:0] X;
reg [5:0] Y;
// wires                                               
wire [13:0] DISPLAY;
wire NEGATIVE;
wire OVERFLOW;
wire [5:0] RESULT;
wire X_IS_LESS_THAN_Y;
wire Z;

// assign statements (if any)                          
GUTIERREZ_INTEGRATION_PROJECT i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DISPLAY(DISPLAY),
	.NEGATIVE(NEGATIVE),
	.OPCODE(OPCODE),
	.OVERFLOW(OVERFLOW),
	.RESULT(RESULT),
	.X(X),
	.X_IS_LESS_THAN_Y(X_IS_LESS_THAN_Y),
	.Y(Y),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
initial
begin
	repeat(12)
	begin
		CLOCK = 1'b0;
		CLOCK = #40000 1'b1;
		# 40000;
	end
	CLOCK = 1'b0;
end 
// OPCODE[ 3 ]
initial
begin
	OPCODE[3] = 1'b0;
	OPCODE[3] = #320000 1'b1;
	OPCODE[3] = #320000 1'b0;
	OPCODE[3] = #320000 1'b1;
end 
// OPCODE[ 2 ]
initial
begin
	repeat(3)
	begin
		OPCODE[2] = 1'b0;
		OPCODE[2] = #160000 1'b1;
		# 160000;
	end
	OPCODE[2] = 1'b0;
end 
// OPCODE[ 1 ]
initial
begin
	repeat(6)
	begin
		OPCODE[1] = 1'b0;
		OPCODE[1] = #80000 1'b1;
		# 80000;
	end
	OPCODE[1] = 1'b0;
end 
// OPCODE[ 0 ]
initial
begin
	repeat(12)
	begin
		OPCODE[0] = 1'b0;
		OPCODE[0] = #40000 1'b1;
		# 40000;
	end
	OPCODE[0] = 1'b0;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
	X[4] = #640000 1'b1;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
	X[3] = #320000 1'b1;
	X[3] = #320000 1'b0;
	X[3] = #320000 1'b1;
end 
// X[ 2 ]
initial
begin
	repeat(3)
	begin
		X[2] = 1'b0;
		X[2] = #160000 1'b1;
		# 160000;
	end
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	repeat(6)
	begin
		X[1] = 1'b0;
		X[1] = #80000 1'b1;
		# 80000;
	end
	X[1] = 1'b0;
end 
// X[ 0 ]
initial
begin
	repeat(12)
	begin
		X[0] = 1'b0;
		X[0] = #40000 1'b1;
		# 40000;
	end
	X[0] = 1'b0;
end 
// Y[ 5 ]
initial
begin
	Y[5] = 1'b0;
	Y[5] = #480000 1'b1;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b1;
	Y[4] = #480000 1'b0;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
	Y[3] = #160000 1'b1;
	Y[3] = #320000 1'b0;
	Y[3] = #320000 1'b1;
end 
// Y[ 2 ]
initial
begin
	repeat(3)
	begin
		Y[2] = 1'b1;
		Y[2] = #160000 1'b0;
		# 160000;
	end
	Y[2] = 1'b1;
end 
// Y[ 1 ]
initial
begin
	repeat(6)
	begin
		Y[1] = 1'b0;
		Y[1] = #80000 1'b1;
		# 80000;
	end
	Y[1] = 1'b0;
end 
// Y[ 0 ]
initial
begin
	repeat(12)
	begin
		Y[0] = 1'b0;
		Y[0] = #40000 1'b1;
		# 40000;
	end
	Y[0] = 1'b0;
end 
endmodule

