// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2017 15:08:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GUTI_16bit_Accumulator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GUTI_16bit_Accumulator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a;
reg clk;
reg reset;
// wires                                               
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [6:0] hex4;
wire overflow;
wire [15:0] sum;

// assign statements (if any)                          
GUTI_16bit_Accumulator i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.clk(clk),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.overflow(overflow),
	.reset(reset),
	.sum(sum)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
	a[5] = #640000 1'b1;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b1;
	a[4] = #640000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #320000 1'b1;
	a[3] = #320000 1'b0;
	a[3] = #320000 1'b1;
end 
// a[ 2 ]
initial
begin
	repeat(3)
	begin
		a[2] = 1'b0;
		a[2] = #160000 1'b1;
		# 160000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	repeat(6)
	begin
		a[1] = 1'b0;
		a[1] = #80000 1'b1;
		# 80000;
	end
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	repeat(12)
	begin
		a[0] = 1'b0;
		a[0] = #40000 1'b1;
		# 40000;
	end
	a[0] = 1'b0;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 
endmodule

