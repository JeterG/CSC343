// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2017 11:49:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Multiplier
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Multiplier_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] x;
reg [7:0] y;
// wires                                               
wire [15:0] product;

// assign statements (if any)                          
Multiplier i1 (
// port map - connection between master ports and signals/registers   
	.product(product),
	.x(x),
	.y(y)
);
initial 
begin 
#1000000 $finish;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #80000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #160000 1'b1;
	x[7] = #80000 1'b0;
	x[7] = #120000 1'b1;
	x[7] = #80000 1'b0;
	x[7] = #40000 1'b1;
	x[7] = #40000 1'b0;
	x[7] = #40000 1'b1;
	x[7] = #80000 1'b0;
	x[7] = #40000 1'b1;
	x[7] = #80000 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b1;
	x[6] = #200000 1'b0;
	x[6] = #160000 1'b1;
	x[6] = #40000 1'b0;
	x[6] = #80000 1'b1;
	x[6] = #40000 1'b0;
	x[6] = #40000 1'b1;
	x[6] = #40000 1'b0;
	x[6] = #40000 1'b1;
	x[6] = #40000 1'b0;
	x[6] = #40000 1'b1;
	x[6] = #120000 1'b0;
	x[6] = #80000 1'b1;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b1;
	x[5] = #120000 1'b0;
	x[5] = #120000 1'b1;
	x[5] = #40000 1'b0;
	x[5] = #80000 1'b1;
	x[5] = #120000 1'b0;
	x[5] = #80000 1'b1;
	x[5] = #80000 1'b0;
	x[5] = #280000 1'b1;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b1;
	x[4] = #120000 1'b0;
	x[4] = #40000 1'b1;
	x[4] = #80000 1'b0;
	x[4] = #40000 1'b1;
	x[4] = #40000 1'b0;
	x[4] = #160000 1'b1;
	x[4] = #80000 1'b0;
	x[4] = #360000 1'b1;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #80000 1'b0;
	x[3] = #160000 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #120000 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #40000 1'b0;
	x[3] = #200000 1'b1;
	x[3] = #40000 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #160000 1'b1;
	x[2] = #40000 1'b0;
	x[2] = #80000 1'b1;
	x[2] = #40000 1'b0;
	x[2] = #120000 1'b1;
	x[2] = #80000 1'b0;
	x[2] = #80000 1'b1;
	x[2] = #200000 1'b0;
	x[2] = #40000 1'b1;
	x[2] = #40000 1'b0;
	x[2] = #40000 1'b1;
	x[2] = #40000 1'b0;
end 
// x[ 1 ]
initial
begin
	x[1] = 1'b1;
	x[1] = #200000 1'b0;
	x[1] = #160000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #80000 1'b1;
	x[1] = #120000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #80000 1'b0;
	x[1] = #80000 1'b1;
	x[1] = #40000 1'b0;
	x[1] = #40000 1'b1;
	x[1] = #40000 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
	x[0] = #160000 1'b1;
	x[0] = #80000 1'b0;
	x[0] = #160000 1'b1;
	x[0] = #40000 1'b0;
	x[0] = #80000 1'b1;
	x[0] = #40000 1'b0;
	x[0] = #120000 1'b1;
	x[0] = #160000 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #40000 1'b0;
end 
// y[ 7 ]
initial
begin
	y[7] = 1'b1;
	y[7] = #80000 1'b0;
	y[7] = #40000 1'b1;
	y[7] = #200000 1'b0;
	y[7] = #80000 1'b1;
	y[7] = #40000 1'b0;
	y[7] = #80000 1'b1;
	y[7] = #40000 1'b0;
	y[7] = #120000 1'b1;
	y[7] = #40000 1'b0;
	y[7] = #80000 1'b1;
	y[7] = #80000 1'b0;
	y[7] = #80000 1'b1;
end 
// y[ 6 ]
initial
begin
	y[6] = 1'b0;
	y[6] = #200000 1'b1;
	y[6] = #280000 1'b0;
	y[6] = #80000 1'b1;
	y[6] = #160000 1'b0;
	y[6] = #160000 1'b1;
end 
// y[ 5 ]
initial
begin
	y[5] = 1'b0;
	y[5] = #40000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #40000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #80000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #40000 1'b1;
	y[5] = #120000 1'b0;
	y[5] = #40000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #120000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #40000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #80000 1'b1;
	y[5] = #40000 1'b0;
	y[5] = #80000 1'b1;
end 
// y[ 4 ]
initial
begin
	y[4] = 1'b0;
	y[4] = #80000 1'b1;
	y[4] = #40000 1'b0;
	y[4] = #40000 1'b1;
	y[4] = #40000 1'b0;
	y[4] = #120000 1'b1;
	y[4] = #40000 1'b0;
	y[4] = #40000 1'b1;
	y[4] = #160000 1'b0;
	y[4] = #40000 1'b1;
	y[4] = #40000 1'b0;
	y[4] = #40000 1'b1;
	y[4] = #40000 1'b0;
	y[4] = #80000 1'b1;
	y[4] = #80000 1'b0;
	y[4] = #40000 1'b1;
	y[4] = #40000 1'b0;
end 
// y[ 3 ]
initial
begin
	y[3] = 1'b1;
	y[3] = #80000 1'b0;
	y[3] = #80000 1'b1;
	y[3] = #120000 1'b0;
	y[3] = #80000 1'b1;
	y[3] = #120000 1'b0;
	y[3] = #120000 1'b1;
	y[3] = #80000 1'b0;
	y[3] = #40000 1'b1;
	y[3] = #40000 1'b0;
	y[3] = #40000 1'b1;
	y[3] = #40000 1'b0;
	y[3] = #40000 1'b1;
	y[3] = #40000 1'b0;
end 
// y[ 2 ]
initial
begin
	y[2] = 1'b1;
	y[2] = #80000 1'b0;
	y[2] = #40000 1'b1;
	y[2] = #40000 1'b0;
	y[2] = #80000 1'b1;
	y[2] = #160000 1'b0;
	y[2] = #160000 1'b1;
	y[2] = #40000 1'b0;
	y[2] = #40000 1'b1;
	y[2] = #80000 1'b0;
	y[2] = #80000 1'b1;
	y[2] = #80000 1'b0;
	y[2] = #40000 1'b1;
	y[2] = #40000 1'b0;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
	y[1] = #160000 1'b1;
	y[1] = #80000 1'b0;
	y[1] = #40000 1'b1;
	y[1] = #160000 1'b0;
	y[1] = #40000 1'b1;
	y[1] = #80000 1'b0;
	y[1] = #40000 1'b1;
	y[1] = #40000 1'b0;
	y[1] = #160000 1'b1;
	y[1] = #40000 1'b0;
	y[1] = #80000 1'b1;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b0;
	y[0] = #40000 1'b1;
	y[0] = #120000 1'b0;
	y[0] = #40000 1'b1;
	y[0] = #160000 1'b0;
	y[0] = #40000 1'b1;
	y[0] = #80000 1'b0;
	y[0] = #40000 1'b1;
	y[0] = #40000 1'b0;
	y[0] = #40000 1'b1;
	y[0] = #40000 1'b0;
	y[0] = #80000 1'b1;
	y[0] = #80000 1'b0;
	y[0] = #40000 1'b1;
	y[0] = #40000 1'b0;
	y[0] = #80000 1'b1;
end 
endmodule

