// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2017 15:34:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GUTI_8BIT_MULTIPLICATION
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GUTI_8BIT_MULTIPLICATION_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] ONE;
reg [7:0] TWO;
// wires                                               
wire [6:0] HEX11;
wire [6:0] HEX22;
wire [6:0] HEX33;
wire [6:0] HEX44;
wire [6:0] HEX55;
wire [6:0] HEX66;
wire [6:0] HEX77;
wire [6:0] HEX88;
wire [15:0] RESULTS;

// assign statements (if any)                          
GUTI_8BIT_MULTIPLICATION i1 (
// port map - connection between master ports and signals/registers   
	.HEX11(HEX11),
	.HEX22(HEX22),
	.HEX33(HEX33),
	.HEX44(HEX44),
	.HEX55(HEX55),
	.HEX66(HEX66),
	.HEX77(HEX77),
	.HEX88(HEX88),
	.ONE(ONE),
	.RESULTS(RESULTS),
	.TWO(TWO)
);
initial 
begin 
#1000000 $finish;
end 
// ONE[ 7 ]
initial
begin
	ONE[7] = 1'b1;
	ONE[7] = #420000 1'b0;
	ONE[7] = #140000 1'b1;
	ONE[7] = #140000 1'b0;
end 
// ONE[ 6 ]
initial
begin
	ONE[6] = 1'b0;
	ONE[6] = #280000 1'b1;
	ONE[6] = #280000 1'b0;
	ONE[6] = #140000 1'b1;
end 
// ONE[ 5 ]
initial
begin
	ONE[5] = 1'b0;
	ONE[5] = #140000 1'b1;
	ONE[5] = #140000 1'b0;
	ONE[5] = #280000 1'b1;
	ONE[5] = #280000 1'b0;
end 
// ONE[ 4 ]
initial
begin
	ONE[4] = 1'b0;
	ONE[4] = #140000 1'b1;
	ONE[4] = #140000 1'b0;
	ONE[4] = #280000 1'b1;
	ONE[4] = #280000 1'b0;
	ONE[4] = #140000 1'b1;
end 
// ONE[ 3 ]
initial
begin
	ONE[3] = 1'b0;
	ONE[3] = #280000 1'b1;
	ONE[3] = #140000 1'b0;
end 
// ONE[ 2 ]
initial
begin
	ONE[2] = 1'b0;
	ONE[2] = #280000 1'b1;
	ONE[2] = #420000 1'b0;
	ONE[2] = #140000 1'b1;
end 
// ONE[ 1 ]
initial
begin
	ONE[1] = 1'b0;
	ONE[1] = #280000 1'b1;
	ONE[1] = #140000 1'b0;
	ONE[1] = #140000 1'b1;
	ONE[1] = #420000 1'b0;
end 
// ONE[ 0 ]
initial
begin
	ONE[0] = 1'b1;
	ONE[0] = #280000 1'b0;
	ONE[0] = #140000 1'b1;
	ONE[0] = #420000 1'b0;
end 
// TWO[ 7 ]
initial
begin
	TWO[7] = 1'b1;
	TWO[7] = #140000 1'b0;
	TWO[7] = #560000 1'b1;
	TWO[7] = #140000 1'b0;
end 
// TWO[ 6 ]
initial
begin
	TWO[6] = 1'b0;
	TWO[6] = #700000 1'b1;
end 
// TWO[ 5 ]
initial
begin
	TWO[5] = 1'b1;
	TWO[5] = #840000 1'b0;
	TWO[5] = #140000 1'b1;
end 
// TWO[ 4 ]
initial
begin
	TWO[4] = 1'b0;
	TWO[4] = #560000 1'b1;
	TWO[4] = #420000 1'b0;
end 
// TWO[ 3 ]
initial
begin
	TWO[3] = 1'b1;
	TWO[3] = #140000 1'b0;
	TWO[3] = #140000 1'b1;
	TWO[3] = #140000 1'b0;
	TWO[3] = #420000 1'b1;
	TWO[3] = #140000 1'b0;
end 
// TWO[ 2 ]
initial
begin
	TWO[2] = 1'b1;
	TWO[2] = #700000 1'b0;
	TWO[2] = #140000 1'b1;
end 
// TWO[ 1 ]
initial
begin
	TWO[1] = 1'b0;
	TWO[1] = #140000 1'b1;
	TWO[1] = #420000 1'b0;
end 
// TWO[ 0 ]
initial
begin
	TWO[0] = 1'b1;
	TWO[0] = #140000 1'b0;
	TWO[0] = #140000 1'b1;
	TWO[0] = #420000 1'b0;
	TWO[0] = #140000 1'b1;
	TWO[0] = #140000 1'b0;
end 
endmodule

