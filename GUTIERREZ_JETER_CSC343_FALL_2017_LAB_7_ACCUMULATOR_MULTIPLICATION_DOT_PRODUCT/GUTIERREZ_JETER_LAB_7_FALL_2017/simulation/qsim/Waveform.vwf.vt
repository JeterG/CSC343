// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2017 12:26:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Subtractor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Subtractor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg add_sub;
reg [7:0] dataa;
reg [7:0] datab;
// wires                                               
wire overflow;
wire [7:0] result;

// assign statements (if any)                          
Subtractor i1 (
// port map - connection between master ports and signals/registers   
	.add_sub(add_sub),
	.dataa(dataa),
	.datab(datab),
	.overflow(overflow),
	.result(result)
);
initial 
begin 
#1000000 $finish;
end 

// add_sub
initial
begin
	add_sub = 1'b0;
end 
// dataa[ 7 ]
initial
begin
	dataa[7] = 1'b0;
end 
// dataa[ 6 ]
initial
begin
	dataa[6] = 1'b0;
end 
// dataa[ 5 ]
initial
begin
	dataa[5] = 1'b0;
end 
// dataa[ 4 ]
initial
begin
	dataa[4] = 1'b0;
end 
// dataa[ 3 ]
initial
begin
	dataa[3] = 1'b0;
end 
// dataa[ 2 ]
initial
begin
	dataa[2] = 1'b0;
end 
// dataa[ 1 ]
initial
begin
	dataa[1] = 1'b0;
end 
// dataa[ 0 ]
initial
begin
	dataa[0] = 1'b0;
end 
// datab[ 7 ]
initial
begin
	datab[7] = 1'b0;
end 
// datab[ 6 ]
initial
begin
	datab[6] = 1'b0;
end 
// datab[ 5 ]
initial
begin
	datab[5] = 1'b0;
end 
// datab[ 4 ]
initial
begin
	datab[4] = 1'b0;
end 
// datab[ 3 ]
initial
begin
	datab[3] = 1'b0;
	datab[3] = #800000 1'b1;
end 
// datab[ 2 ]
initial
begin
	datab[2] = 1'b0;
	datab[2] = #400000 1'b1;
	datab[2] = #400000 1'b0;
end 
// datab[ 1 ]
initial
begin
	repeat(2)
	begin
		datab[1] = 1'b0;
		datab[1] = #200000 1'b1;
		# 200000;
	end
	datab[1] = 1'b0;
end 
// datab[ 0 ]
always
begin
	datab[0] = 1'b0;
	datab[0] = #100000 1'b1;
	#100000;
end 
endmodule

