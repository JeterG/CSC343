// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/10/2017 07:02:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GUTIERREZ_FULL_ADDER_USING_GATES
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GUTIERREZ_FULL_ADDER_USING_GATES_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg cin;
// wires                                               
wire cout;
wire sum;

// assign statements (if any)                          
GUTIERREZ_FULL_ADDER_USING_GATES i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cin(cin),
	.cout(cout),
	.sum(sum)
);
initial 
begin 
#300000 $finish;
end 

// a
always
begin
	a = 1'b0;
	a = #10000 1'b1;
	#10000;
end 

// b
initial
begin
	repeat(7)
	begin
		b = 1'b0;
		b = #20000 1'b1;
		# 20000;
	end
	b = 1'b0;
end 

// cin
always
begin
	cin = 1'b0;
	cin = #30000 1'b1;
	#30000;
end 
endmodule

