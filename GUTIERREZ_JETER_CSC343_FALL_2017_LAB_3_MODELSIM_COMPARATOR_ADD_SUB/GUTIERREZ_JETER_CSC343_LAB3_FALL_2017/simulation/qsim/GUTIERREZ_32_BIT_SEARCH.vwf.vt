// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/25/2017 11:42:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GUTIERREZ_32_BIT_SEARCH
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GUTIERREZ_32_BIT_SEARCH_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] X;
// wires                                               
wire [9:0] Position;

// assign statements (if any)                          
GUTIERREZ_32_BIT_SEARCH i1 (
// port map - connection between master ports and signals/registers   
	.Position(Position),
	.X(X)
);
initial 
begin 
#1000000 $finish;
end 
// X[ 31 ]
initial
begin
	X[31] = 1'b0;
end 
// X[ 30 ]
initial
begin
	X[30] = 1'b0;
end 
// X[ 29 ]
initial
begin
	X[29] = 1'b0;
end 
// X[ 28 ]
initial
begin
	X[28] = 1'b0;
end 
// X[ 27 ]
initial
begin
	X[27] = 1'b0;
end 
// X[ 26 ]
initial
begin
	X[26] = 1'b0;
end 
// X[ 25 ]
initial
begin
	X[25] = 1'b0;
end 
// X[ 24 ]
initial
begin
	X[24] = 1'b0;
end 
// X[ 23 ]
initial
begin
	X[23] = 1'b0;
end 
// X[ 22 ]
initial
begin
	X[22] = 1'b0;
end 
// X[ 21 ]
initial
begin
	X[21] = 1'b0;
end 
// X[ 20 ]
initial
begin
	X[20] = 1'b0;
end 
// X[ 19 ]
initial
begin
	X[19] = 1'b0;
end 
// X[ 18 ]
initial
begin
	X[18] = 1'b0;
end 
// X[ 17 ]
initial
begin
	X[17] = 1'b0;
end 
// X[ 16 ]
initial
begin
	X[16] = 1'b0;
end 
// X[ 15 ]
initial
begin
	X[15] = 1'b0;
end 
// X[ 14 ]
initial
begin
	X[14] = 1'b0;
end 
// X[ 13 ]
initial
begin
	X[13] = 1'b0;
end 
// X[ 12 ]
initial
begin
	X[12] = 1'b0;
end 
// X[ 11 ]
initial
begin
	X[11] = 1'b0;
end 
// X[ 10 ]
initial
begin
	X[10] = 1'b0;
end 
// X[ 9 ]
initial
begin
	X[9] = 1'b0;
end 
// X[ 8 ]
initial
begin
	X[8] = 1'b0;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b0;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b0;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
	X[3] = #560000 1'b1;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
	X[2] = #240000 1'b1;
	X[2] = #320000 1'b0;
	X[2] = #320000 1'b1;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
	# 80000;
	repeat(2)
	begin
		X[1] = 1'b1;
		X[1] = #160000 1'b0;
		# 160000;
	end
	X[1] = 1'b1;
	X[1] = #160000 1'b0;
end 
// X[ 0 ]
initial
begin
	repeat(6)
	begin
		X[0] = 1'b1;
		X[0] = #80000 1'b0;
		# 80000;
	end
	X[0] = 1'b1;
end 
endmodule

